type Role {
    id: ID!
    accessLevel: Int!
    name: String!
    updatedAt: Int
    deletedAt: Int
    createdAt: Int
    users: [User]
}

input RoleFilter {
    search: String
    where: RoleWhere
}

input RolePagination {
    limit: Int!
    page: Int!
}

input RoleWhere {
    id: IDFilter
    accessLevel: IntFilter
    name: StringFilter
    updatedAt: IntFilter
    deletedAt: IntFilter
    createdAt: IntFilter
    users: UserWhere
    or: RoleWhere
    and: RoleWhere
}
input RoleCreateInput {
    accessLevel: Int!
    name: String!
}

input RoleUpdateInput {
    accessLevel: Int
    name: String
    updatedAt: Int
    deletedAt: Int
    createdAt: Int
}

input RolesCreateInput {
    roles: [RoleCreateInput!]!
}

type RolePayload {
    role: Role!
}

type RoleDeletePayload {
    id: ID!
}

type RolesPayload {
    roles: [Role!]!
}

type RolesDeletePayload {
    ids: [ID!]!
}

type RolesUpdatePayload {
    ok: Boolean!
}